# Use the NVIDIA PyTorch container as the base image
FROM nvcr.io/nvidia/pytorch:22.06-py3

# Create a new group and user called 'algorithm' and set up directories
RUN groupadd -r algorithm && useradd -m --no-log-init -r -g algorithm algorithm

# Create necessary directories and set ownership to 'algorithm' user and group
RUN mkdir -p /opt/algorithm /input /output /opt/algorithm/ts \
    && chown algorithm:algorithm /opt/algorithm /input /output /opt/algorithm/ts

# Switch to the 'algorithm' user for the rest of the Docker build process
USER algorithm

# Set the working directory to /opt/algorithm
WORKDIR /opt/algorithm

# Add the local bin directory to the PATH
ENV PATH="/home/algorithm/.local/bin:${PATH}"

# Upgrade pip for the user
RUN python -m pip install --user -U pip

# Install pip-check and pipdeptree for dependency checking
RUN python -m pip install --user pip-check pipdeptree

# Copy the requirements file into the Docker image
COPY --chown=algorithm:algorithm requirements.txt /opt/algorithm/

# Install the Python dependencies in a specific order to reduce conflicts
# Running dependencies installation separately to help in debugging issues if they occur
RUN python -m pip install --user scipy==1.6.3 scikit-learn==0.24.2 scikit-image==0.18 SimpleITK pydicom==2.1.2
RUN python -m pip install --user evalutils==0.3.1 nibabel gdown
RUN python -m pip install --user monai[all]==0.9.0


# Execute any additional setup steps required, such as downloading trained models
RUN bash get_trained_model.sh

# Copy the main process script and additional files into the image
COPY --chown=algorithm:algorithm process.py /opt/algorithm/
COPY --chown=algorithm:algorithm ./ts /opt/algorithm/ts

# Set the entry point to run the process script
ENTRYPOINT ["python", "-m", "process"]
CMD []